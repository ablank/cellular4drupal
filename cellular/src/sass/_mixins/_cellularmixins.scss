/**
  * @file
  // Cellular SASS mixins
  //    tread with caution
  //                      ^    ^
  //                     / \  //\
  //       |\___/|      /   \//  \
  //       /O  O  \__  /    //  | \
  //      /     /  \/_/    //   |  \
  //      @___@'    \/_   //    |   \
  //         |       \/_ //     |    \
  //         |        \///      |     \
  //        _|_ /   )  //       |      \
  //       '/,_ _ _/  ( ; -.    |    _ _\           .-~~~^-.
  //       ,-{        _      `-.|.-~-.           .~         `.
  //        '/\      /                 ~-. _ .-~      .-~^-.  \
  //           `.   {            }                   /      \  \
  //         .----~-.\        \-'                 .~   `      \  `. \^-_
  //        ///.----..>    c   \             _ -~             `.  ^-`  ^-_
  //          ///-._ _ _ _ _ _ _}^ - - - - ~                     ~--,___.-/
  //
  /////
*/
@mixin clear() {
  clear: both;
  zoom: 1;
  &:after,
  &:before {
    content: "";
    display: block;
    width: 100%;
    clear: both;
  }
}
@mixin overlay($color) {
  $opacity: 0.8;
  background-color: adjust-saturation($color, -($opacity * 10));
  background-color: rgba($color, $opacity);
  @if lightness($color) < 50% {
    color: darken($color, 70%);
    h2,
    h3,
    h4 {
      color: darken($color, 50%);
    }
    p {
      color: darken($color, 70%);
    }
  }
  @else {
    color: lighten($color, 70%);
    h2,
    h3,
    h4 {
      color: lighten($color, 50%);
    }
    p {
      color: lighten($color, 70%);
    }
  }
}
@mixin uniquelinks($hilight: $hilight) {
  // Unique link styling
  &:nth-child(1) a {
    border-color: darken($hilight, 10%);
  }
  &:nth-child(2) a {
    border-color: darken($hilight, 20%);
  }
  &:nth-child(3) a {
    border-color: darken($hilight, 30%);
  }
  &:nth-child(4) a {
    border-color: darken($hilight, 40%);
  }
  &:nth-child(5) a {
    border-color: darken($hilight, 50%);
  }
}
@mixin contrast($color) {
  @if lightness($color) < 50%{
    color: lighten($color, 70%);
    p {
      color: lighten($color, $adjust_large);
    }
  }
  @else {
    color: darken($color, 70%);
    p {
      color: darken($color, $adjust_large);
    }
  }
}
@mixin checkbox($size: 1em, $img: input_sprite) {
  // Apply pseudo-element selectors so old browsers still work

  &:checked,
  &:not(:checked) {
    position: absolute;
    left: -999em;

    + label {
      z-index: 1;
      position: relative;
      float: left;
      cursor: pointer;
      padding: 0 ($size * 2) 0 0;
      vertical-align: middle;
      text-indent: $size * 1.8;

      &:before,
      &:after {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        width: $size;
        height: $size;
        vertical-align: middle;
      }

      &:before {
        background: darken($white, 2%);
        border: $grey $border;
        box-shadow: inset 0 0 1px 1px $light_grey;
      }
      &:after {
        background-image: url('../assets/icons/png/#{$img}.png');
        background-image: url('../assets/icons/svg/#{$img}.svg');
        background-size: $size * 5;
        background-repeat: no-repeat;
        background-position: -999em;
      }
    }
    &:focus {
      + label {
        &:before {
          //border: 1px dotted $hilight;
        }
      }
    }
    &:disabled {
      + label {
        color: $light_grey;
        &:before {
          background: $light_grey;
          color: $dark_grey;
        }
      }
    }
  }
}
@mixin textstroke($color: $white, $size: 1px) {
  text-shadow: -$size -$size 0 $color, $size -$size 0 $color, -$size $size 0 $color, $size $size 0 $color;
}
@mixin button($color: $dark_grey, $background: $white, $hilight: $hilight, $style: 'flat') {
  // 'flat' || 'bevel'
  $color2: null;
  $background2: null;
  @if(lightness($color) < 50%) {
    $color2: lighten($color, 10%);
  }
  @if(lightness($color) > 50%) {
    $color2: darken($color, 10%);
  }
  @if(lightness($background) < 50%) {
    $background2: lighten($background, 20%);
  }
  @if(lightness($background) > 50%) {
    $background2: darken($background, 20%);
  }
  & {
    cursor: pointer;
    width: auto;
    margin: $tiny auto;
    padding: $small $normal;
    text-align: center;
    font-family: $h_font;
    font-weight: bold;
    line-height: normal;
    border: $color 2px solid;
    color: $color;
    background-color: $background;
    // transform: translate3d(0,0,0);
    @if ($style == 'bevel') {
      @include gradient_y($background, $background2, $background);
      @include border-radius();
    }
    @else {
      @include border-radius(0.1em);
      @include box-shadow($background2 0 0.1em $small);
    }
    &:visited {
      color: $color;
      background-color: $background;
    }
    &.active,
    &:active {
      cursor: default;
    }
    &.active,
    &:active,
    &:hover {
      outline: none;
      text-decoration: none;
      border-color: $color2;
      //transform: translate3d(0,0.1em,1em);
      @if ($style == 'bevel') {
        @include gradient_y($background, $background);
      }
      @else {
        border-color: $hilight;
        @include box-shadow($background2 0 0.1em 0.4em);
      }
    }
  }
}
@mixin link($color) {
  color: $color;
  &:visited {
    color: darken($color, 15%);
  }
  &:active,
  &:focus,
  &:hover {
    color: lighten($color, 15%);
  }
}
@mixin title {
  background: $black;
  color: $white;
  text-decoration: none;
}
// Fullscreen background image
@mixin cover($url) {
  background: url($url) no-repeat center center fixed;
  @include prefix(background-size, cover);
}
// Horizontal Linear Gradient
@mixin gradient_x($color_1: $white, $color_2: nil, $color_3: nil) {
  background-color: $color_1;
  @if($color_3 != nil) {
    background-image: linear-gradient(to right, $color_1 0%, $color_2 50%, $color_3 100%);
  }
  @else if($color_2 != nil) {
    background-image: linear-gradient(to right, $color_1 0%, $color_2 100%);
  }
  @else {
    @if(darkness($color_1) < 50%){
      $color_2: darken($color_1, 50%);
    }
    @else {
      $color_2: lighten($color_1, 50%);
    }
    background-image: linear-gradient(to right, $color_1 0%, $color_2 100%);
  }
}
// Vertical Linear Gradient
@mixin gradient_y($color_1: $white, $color_2: nil, $color_3: nil) {
  background-color: $color_1;
  @if($color_3 != nil) {
    background-image: linear-gradient(to bottom, $color_1 0%, $color_2 50%, $color_3 100%);
  }
  @else if($color_2 != nil) {
    background-image: linear-gradient(to bottom, $color_1 0%, $color_2 100%);
  }
  @else {
    @if(lightness($color_1) < 50%){
      $color_2: darken($color_1, 50%);
    }
    @else {
      $color_2: lighten($color_1, 50%);
    }
    background-image: linear-gradient(to bottom, $color_1 0%, $color_2 100%);
  }
}
// Radial Gradient
@mixin gradient_rad($color_1: $black, $color_2: $white) {
  background-color: $color_1;
  background-image: radial-gradient(ellipse farthest-side at center top, $color_1 0%, $color_2 100%);
}
@mixin round($rad: $default-border-radius, $dir: 'all') {
  @if ($dir == 'all'){
    border-radius: $rad;
  }
  @if ($dir == 'top') {
    border-top-left-radius: $rad;
    border-top-right-radius: $rad;
  }
  @if ($dir == 'right') {
    border-top-right-radius: $rad;
    border-bottom-right-radius: $rad;
  }
  @if ($dir == 'bottom') {
    border-bottom-left-radius: $rad;
    border-bottom-right-radius: $rad;
  }
  @if ($dir == 'left') {
    border-top-left-radius: $rad;
    border-bottom-left-radius: $rad;
  }
}
@mixin triangle($width: $normal, $height: $normal, $color: $black, $direction: 'left') {
  content: "";
  position: absolute;
  width: 0;
  height: 0;
  @if ($direction == 'left') {
    border-top: ($height/2) solid transparent;
    border-bottom: ($height/2) solid transparent;
    border-right: $width solid $color;
  }
  @if ($direction == 'right') {
    border-top: ($height/2) solid transparent;
    border-bottom: ($height/2) solid transparent;
    border-left: $width solid $color;
  }
  @if ($direction == 'up') {
    border-left: ($width/2) solid transparent;
    border-right: ($width/2) solid transparent;
    border-bottom: $height solid $color;
  }
  @if ($direction == 'down') {
    border-left: ($width/2) solid transparent;
    border-right: ($width/2) solid transparent;
    border-top: $height solid $color;
  }
}
@mixin ribbon($width: $normal, $height: $normal, $color: $black) {
  position: relative;
  margin: 0 auto $height;
  padding: 0 $width;
  border-bottom: darken($color, 10%) 1px solid;
  background-color: $color;
  &:after,
  &:before {
    content: " ";
    position: absolute;
    bottom: -$height;
    border-top: darken($color, 10%) $height solid;
  }
  &:before {
    left: 0;
    border-left: $width solid transparent;
  }
  &:after {
    right: 0;
    border-right: $width solid transparent;
  }
}
@mixin popout($width: $normal, $height: $normal, $color: $black) {
  position: relative;
  margin: 0 0 $height;
  padding: 0 $width;
  background: $color;
  border-bottom: darken($color, 10%) 1px solid;
  &:after {
    content: " ";
    position: absolute;
    left: 0;
    right: 0;
    bottom: -$height;
    height: 0;
    border-top: $height solid darken($color, 30%);
    border-left: $width solid transparent;
    border-right: $width solid transparent;
  }
}
